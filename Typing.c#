using System.Collections;
using UnityEngine;
using UnityEngine.UI;
using TMPro;

public class typewriterUI_v2 : MonoBehaviour
{
    [SerializeField] Text text;
    [SerializeField] TMP_Text tmpProText;
    string writer;
    [SerializeField] private Coroutine coroutine;

    [SerializeField] float delayBeforeStart = 0f;
    [SerializeField] float timeBtwChars = 0.1f;
    [SerializeField] string leadingChar = "";
    [SerializeField] bool leadingCharBeforeDelay = false;
    [Space(10)][SerializeField] private bool startOnEnable = false;

    [Header("Sound Settings")]
    [SerializeField] private AudioSource audioSource;
    [SerializeField] private AudioClip typingSound;

    [Header("Blink Settings")]
    [SerializeField] private bool blinkAfterTyping = true;
    [SerializeField] private int blinkCount = 3;
    [SerializeField] private float blinkDuration = 0.2f;

    [Header("Text Persistence Settings")]
    [SerializeField] private bool persistAfterBlink = false;  

    [Header("Activation Settings")]
    [SerializeField] private bool enableActivationWithTab = false; 

    private bool isTextCompleted = false;  

    void Awake()
    {
        if (text != null)
        {
            writer = text.text;
        }

        if (tmpProText != null)
        {
            writer = tmpProText.text;
        }
    }

    void Update()
    {
       
        if (enableActivationWithTab && Input.GetKeyDown(KeyCode.Tab) && isTextCompleted)
        {
            isTextCompleted = false;
            StartTypewriter();
        }
    }

    private void OnEnable()
    {
        if (startOnEnable) StartTypewriter();
    }

    private void StartTypewriter()
    {
        StopAllCoroutines();

        if (text != null)
        {
            text.text = "";
            StartCoroutine(TypeWriterText());
        }

        if (tmpProText != null)
        {
            tmpProText.text = "";
            StartCoroutine(TypeWriterTMP());
        }
    }

    private void OnDisable()
    {
        StopAllCoroutines();
    }

    IEnumerator TypeWriterText()
    {
        text.text = leadingCharBeforeDelay ? leadingChar : "";

        yield return new WaitForSeconds(delayBeforeStart);

        foreach (char c in writer)
        {
            if (text.text.Length > 0)
            {
                text.text = text.text.Substring(0, text.text.Length - leadingChar.Length);
            }
            text.text += c;
            text.text += leadingChar;


            if (!char.IsWhiteSpace(c))
            {
                PlayTypingSound();
            }

            yield return new WaitForSeconds(timeBtwChars);
        }

        if (leadingChar != "")
        {
            text.text = text.text.Substring(0, text.text.Length - leadingChar.Length);
        }

        if (blinkAfterTyping)
        {
            yield return StartCoroutine(BlinkText(text));
        }

        if (!persistAfterBlink) 
        {
            text.text = "";
        }

        isTextCompleted = true;  
    }

    IEnumerator TypeWriterTMP()
    {
        tmpProText.text = leadingCharBeforeDelay ? leadingChar : "";

        yield return new WaitForSeconds(delayBeforeStart);

        foreach (char c in writer)
        {
            if (tmpProText.text.Length > 0)
            {
                tmpProText.text = tmpProText.text.Substring(0, tmpProText.text.Length - leadingChar.Length);
            }
            tmpProText.text += c;
            tmpProText.text += leadingChar;

            
            if (!char.IsWhiteSpace(c))
            {
                PlayTypingSound();
            }

            yield return new WaitForSeconds(timeBtwChars);
        }

        if (leadingChar != "")
        {
            tmpProText.text = tmpProText.text.Substring(0, tmpProText.text.Length - leadingChar.Length);
        }

        if (blinkAfterTyping)
        {
            yield return StartCoroutine(BlinkText(tmpProText));
        }

        if (!persistAfterBlink)  
        {
            tmpProText.text = "";
        }

        isTextCompleted = true;  
    }

    IEnumerator BlinkText(Graphic targetText)
    {
        for (int i = 0; i < blinkCount * 2; i++)
        {
            targetText.enabled = !targetText.enabled;
            yield return new WaitForSeconds(blinkDuration);
        }
        targetText.enabled = true; 
    }

    private void PlayTypingSound()
    {
        if (audioSource != null && typingSound != null)
        {
            audioSource.PlayOneShot(typingSound);
        }
    }
}
